{{- /* template to render gateway endpoint registration */ -}}

package endpoints

import (
	"context"

	{{range $idx, $pkg := .IncludedPackages -}}
	{{$pkg.AliasName}} "{{$pkg.PackageName}}"
	{{end}}

	"github.com/uber/zanzibar/runtime"
)

// Endpoints is a struct that holds all the endpoints
type Endpoints struct {
	{{range $idx, $e := .Endpoints -}}
	{{$e.HandlerName}} {{$e.HandlerType}}
	{{end}}
}

// CreateEndpoints bootstraps the endpoints.
func CreateEndpoints(
	gateway *zanzibar.Gateway,
) interface{} {
	return &Endpoints{
		{{range $idx, $e := .Endpoints -}}
		{{$e.HandlerName}}:
			{{$e.PackageName}}.{{$e.Constructor}}(gateway),
		{{end}}
	}
}

// Register will register all endpoints
func Register(g *zanzibar.Gateway) {
	endpoints := CreateEndpoints(g).(*Endpoints)

	{{/* TODO: simplify HTTPRouter API for clear mounting as TChannelRouter */ -}}
	{{range $idx, $e := .Endpoints -}}
	{{if eq .EndpointType "HTTP" -}}
	g.HTTPRouter.Register(
		"{{.Method.HTTPMethod}}", "{{.Method.HTTPPath}}",
		zanzibar.NewRouterEndpoint(
			g,
			"{{.EndpointID}}",
			"{{.HandlerID}}",
			{{ if len .Middlewares | ne 0 -}}
			zanzibar.NewStack([]zanzibar.MiddlewareHandle{
				{{range $idx, $middleware := $e.Middlewares -}}
				{{$middleware.Name}}.NewMiddleWare(
					g,
						{{$middleware.Name}}.Options{
						{{range $key, $value := $middleware.Options -}}
								{{$key}} : {{$value}},
						{{end -}}
						},
				),
				{{end -}}
			}, endpoints.{{$e.HandlerName}}.HandleRequest).Handle,
			{{- else -}}
			endpoints.{{$e.HandlerName}}.HandleRequest,
			{{- end}}
		),
	)
	{{else -}}
	g.TChannelRouter.Register("{{.Method.ThriftService}}", "{{.Method.Name}}", endpoints.{{.HandlerName}})
	{{end -}}
	{{end -}}
}
