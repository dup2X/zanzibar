{{- /* template to render edge gateway tchannel server code */ -}}
// Code generated by zanzibar
// @generated

// Package {{.PackageName}} is generated code used to handle TChannel calls using Thrift.
package {{.PackageName}}

import (
	"context"
	"errors"

	"go.uber.org/thriftrw/wire"
	"go.uber.org/zap"
	"{{.GatewayPackageName}}/clients"
	zanzibar "github.com/uber/zanzibar/runtime"

	{{range $idx, $pkg := .IncludedPackages -}}
	{{$pkg.AliasName}} "{{$pkg.PackageName}}"
	{{end -}}
)

{{$workflow := .WorkflowName -}}
{{$serviceMethod := printf "%s%s" .Method.ThriftService .Method.Name -}}
{{$handlerName := printf "%sHandler"  $serviceMethod -}}
{{$genCodePkg := .Method.GenCodePkgName -}}
{{with .Method -}}
// New{{$handlerName}} creates a handler to be registered with a thrift server.
func New{{$handlerName}}(
	gateway *zanzibar.Gateway,
) zanzibar.TChannelHandler {
	return &{{$handlerName}}{
		Clients: gateway.Clients.(*clients.Clients),
		Logger: gateway.Logger,
	}
}

// {{$handlerName}} is the handler for "{{.ThriftService}}::{{.Name}}".
type {{$handlerName}} struct {
	Clients *clients.Clients
	Logger *zap.Logger
}

// Handle handles RPC call of "{{.ThriftService}}::{{.Name}}".
func (h *{{$handlerName}}) Handle(
	ctx context.Context,
	reqHeaders map[string]string,
	wireValue *wire.Value,
) (bool, zanzibar.RWTStruct, map[string]string, error) {
	wfReqHeaders := zanzibar.ServerTChannelHeader(reqHeaders)
	{{if .ReqHeaders -}}
	if err := wfReqHeaders.Ensure({{.ReqHeaders | printf "%#v" }}); err != nil {
		return false, nil, nil, err
	}
	{{- end}}

	var res {{$genCodePkg}}.{{title .ThriftService}}_{{title .Name}}_Result

	{{if ne .RequestType "" -}}
	var req {{unref .RequestType}}
	if err := req.FromWire(*wireValue); err != nil {
		return false, nil, nil, err
	}
	{{end -}}

	workflow := {{$workflow}}{
		Clients: h.Clients,
		Logger: h.Logger,
	}

	{{if and (eq .RequestType "") (eq .ResponseType "")}}
	wfResHeaders, err := workflow.Handle(ctx, wfReqHeaders)
	{{else if eq .RequestType ""}}
	r, wfResHeaders, err := workflow.Handle(ctx, wfReqHeaders)
	{{else if eq .ResponseType ""}}
	wfResHeaders, err := workflow.Handle(ctx, wfReqHeaders, &req)
	{{else}}
	r, wfResHeaders, err := workflow.Handle(ctx, wfReqHeaders, &req)
	{{end}}

	{{- if .ResHeaders}}
	if err := wfResHeaders.Ensure({{.ResHeaders | printf "%#v" }}); err != nil {
		return false, nil, nil, err
	}
	{{- end}}

	resHeaders := map[string]string{}
	for _, key := range wfResHeaders.Keys() {
		resHeaders[key], _ = wfResHeaders.Get(key)
	}

	{{if eq (len .Exceptions) 0 -}}
		if err != nil {
			return false, nil, resHeaders, err
		}
		res.Success = r
	{{else -}}
		if err != nil {
			switch v := err.(type) {
			{{$method := .Name -}}
			{{range .Exceptions -}}
				case *{{.Type}}:
					if v == nil {
						return false, nil, resHeaders, errors.New(
							"Handler for {{$method}} returned non-nil error type *{{.Type}} but nil value",
						)
					}
					res.{{title .Name}} = v
			{{end -}}
				default:
					return false, nil, resHeaders, err
			}
		} {{if ne .ResponseType "" -}} else {
			res.Success = r
		} {{end -}}
	{{end}}

	return err == nil, &res, resHeaders, nil
}

{{end -}}
