// Code generated by zanzibar
// @generated

// Copyright (c) 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package main

import (
	"os"
	"path/filepath"
	"runtime"

	"github.com/uber/zanzibar/examples/example-gateway/build/clients"
	"github.com/uber/zanzibar/examples/example-gateway/build/endpoints"
	"github.com/uber/zanzibar/runtime"
	"go.uber.org/zap"
)

func getDirName() string {
	_, file, _, _ := runtime.Caller(0)
	return zanzibar.GetDirnameFromRuntimeCaller(file)
}

func getConfigDirName() string {
	return filepath.Join(
		getDirName(),
		"../../..",
		"config",
	)
}

func getConfig() *zanzibar.StaticConfig {
	return zanzibar.NewStaticConfigOrDie([]string{
		// TODO: zanzibar-defaults should be bundled in the binary
		filepath.Join(getDirName(), "zanzibar-defaults.json"),
		filepath.Join(getConfigDirName(), "production.json"),
		filepath.Join(os.Getenv("CONFIG_DIR"), "production.json"),
	}, nil)
}

func createGateway() (*zanzibar.Gateway, error) {
	config := getConfig()

	gateway, err := zanzibar.CreateGateway(config, nil)
	if err != nil {
		return nil, err
	}

	clients := clients.CreateClients(gateway)
	gateway.Clients = clients

	return gateway, nil
}

func logAndWait(server *zanzibar.Gateway) {
	server.Logger.Info("Started ExampleGateway",
		zap.String("realHTTPAddr", server.RealHTTPAddr),
		zap.String("realTChannelAddr", server.RealTChannelAddr),
		zap.Any("config", server.InspectOrDie()),
	)

	// TODO: handle sigterm gracefully
	server.Wait()
	// TODO: emit metrics about startup.
	// TODO: setup and configure tracing/jeager.
}

func main() {
	server, err := createGateway()
	if err != nil {
		panic(err)
	}

	err = server.Bootstrap(endpoints.Register)
	if err != nil {
		panic(err)
	}
	logAndWait(server)
}
